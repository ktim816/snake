{"version":3,"sources":["abstracts.ts","helpers/common.ts","components/Background.ts","components/Board/Food.ts","components/Board/Bomb.ts","components/Board/BoardCell.ts","components/Board/Board.ts","components/Snake/SnakeCell.ts","components/Snake/Snake.ts","index.ts"],"names":[],"mappings":";AAWG,aAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EAXmB,IAAA,EAMpB,EAAA,SAAmB,EAAA,GAAoC,IAAA,EAAA,KAAA,EAAA,KAAA,GAAA,EAAA,KAAA,WAAA,GAAA,EAAA,KAAA,SAAA,GAAA,EAAA,KAAA,SAAA,GAAA,EAAA,KAAA,aAAA,GAAA,EAAA,KAAA,cAAA,GAAA,EAOhD,KAAA,OAAA,SAAC,GACN,EAAK,EAAI,IAR4C,EAWhD,KAAA,OAAA,SAAC,GACN,EAAK,EAAI,IAZ4C,EAe9C,KAAA,SAAA,cAf8C,EAiB3C,KAAA,YAAA,SAAC,EAAyB,GACpC,GAAK,EAAK,IAAV,CAEA,IAAM,EAAY,EAAK,MAAQ,EACzB,EAAa,EAAK,OAAS,EAGjC,EAAK,IAAI,OAGT,EAAK,IAAI,UAAU,EAAK,EAAI,EAAW,EAAK,EAAI,GAGhD,EAAK,IAAI,OAAQ,EAAS,KAAK,GAAM,KAGrC,EAAK,IAAI,UAAU,GAAQ,GAAY,GAGvC,EAAK,IAAI,aApCQ,KAAA,IAAA,EACjB,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,MAAQ,EACb,KAAK,OAAS,IACf,QAAA,KAAA;;ACPI,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAA,QAAA,iBAAA,EAJA,IAAM,EAAS,SAAC,EAAa,GAClC,OAAO,KAAK,MAAM,KAAK,UAAY,EAAM,EAAM,GAAK,IAG/C,QAAA,OAAA,EAAA,IAAM,EAAc,SAAC,GAC1B,IAAM,EAAQ,IAAI,MAElB,OADA,EAAM,IAAM,EACL,GAHF,QAAA,YAAA;;;;ACmBQ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAvBf,IAAA,EAAA,QAAA,gBACA,EAAA,QAAA,qBAsBe,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,EAAA,UAAA,OAAA,OAAA,GAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,KAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,OAAA,SAAA,EAAA,GAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,IAAA,OAAA,WAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,MAAA,YAAA,EAAA,QAAA,UAAA,EAAA,UAAA,QAAA,EAAA,EAAA,MAAA,KAAA,WAAA,OAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,IAAA,WAAA,EAAA,IAAA,mBAAA,GAAA,OAAA,EAAA,QAAA,IAAA,EAAA,MAAA,IAAA,UAAA,4DAAA,OAAA,EAAA,GAAA,SAAA,EAAA,GAAA,QAAA,IAAA,EAAA,MAAA,IAAA,eAAA,6DAAA,OAAA,EAAA,SAAA,IAAA,GAAA,oBAAA,UAAA,QAAA,UAAA,OAAA,EAAA,GAAA,QAAA,UAAA,KAAA,OAAA,EAAA,GAAA,mBAAA,MAAA,OAAA,EAAA,IAAA,OAAA,QAAA,UAAA,QAAA,KAAA,QAAA,UAAA,QAAA,GAAA,gBAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,OAAA,SAAA,GAAA,OAAA,EAAA,WAAA,OAAA,eAAA,KAAA,GAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EApBf,IAAM,EAAU,QAAhB,mCAEM,EAAA,SAAA,GAkBS,EAAA,EAlBU,EAAA,MAkBV,IAAA,EAAA,EAAA,GAfb,SAAY,EAAA,GAA8B,IAAA,EAAA,OAAA,EAAA,KAAA,GAAA,EAAA,EACxC,EAAM,EAAA,KAAA,KAAA,IADkC,aAAA,GAAA,EAMjC,EAAA,GAAA,SAAA,WACP,IAAK,EAAK,IACR,MAAM,IAAI,MAAM,yCAGlB,EAAK,IAAI,UAAU,EAAK,MAAO,EAAK,EAAG,EAAK,KAR5C,EAAK,OAAQ,EAAA,EAAA,aAAY,GAHe,EAe7B,OAAA,EAAA,GAlBT,GAkBS,EAAA,EAAA,QAAA,QAAA;;;;;;ACaA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EApCf,IAAA,EAAA,QAAA,mBACA,EAAA,QAAA,wBAmCe,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,EAAA,UAAA,OAAA,OAAA,GAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,KAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,OAAA,SAAA,EAAA,GAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,IAAA,OAAA,WAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,MAAA,YAAA,EAAA,QAAA,UAAA,EAAA,UAAA,QAAA,EAAA,EAAA,MAAA,KAAA,WAAA,OAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,IAAA,WAAA,EAAA,IAAA,mBAAA,GAAA,OAAA,EAAA,QAAA,IAAA,EAAA,MAAA,IAAA,UAAA,4DAAA,OAAA,EAAA,GAAA,SAAA,EAAA,GAAA,QAAA,IAAA,EAAA,MAAA,IAAA,eAAA,6DAAA,OAAA,EAAA,SAAA,IAAA,GAAA,oBAAA,UAAA,QAAA,UAAA,OAAA,EAAA,GAAA,QAAA,UAAA,KAAA,OAAA,EAAA,GAAA,mBAAA,MAAA,OAAA,EAAA,IAAA,OAAA,QAAA,UAAA,QAAA,KAAA,QAAA,UAAA,QAAA,GAAA,gBAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,OAAA,SAAA,GAAA,OAAA,EAAA,WAAA,OAAA,eAAA,KAAA,GAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAjCf,IAAM,EAAY,QAAlB,gCACM,EAAY,QAAlB,gCAEM,EAAA,SAAA,GA8BS,EAAA,EA9BI,EAAA,MA8BJ,IAAA,EAAA,EAAA,GA1Bb,SAAY,EAAA,GAA8B,IAAA,EAAA,OAAA,EAAA,KAAA,GAAA,EAAA,EACxC,EAAM,EAAA,KAAA,KAAA,IADkC,aAAA,GAAA,EAAA,EAAA,GAAA,aAAA,GAAA,EAY9B,EAAA,GAAA,YAAA,WACV,EAAK,MAAM,YAAc,EACzB,EAAK,MAAM,SAd6B,EAiBjC,EAAA,GAAA,SAAA,WACP,IAAK,EAAK,IACR,MAAM,IAAI,MAAM,yCAGlB,EAAK,IAAI,UAAU,EAAK,MAAO,EAAK,EAAG,EAAK,KAnB5C,EAAK,MAAQ,GACb,EAAK,OAAS,GAEd,EAAK,MAAQ,IAAI,MAAM,GACvB,EAAK,MAAM,OAAS,IAEpB,EAAK,OAAQ,EAAA,EAAA,aAAY,GATe,EA0B7B,OAAA,EAAA,GA9BT,GA8BS,EAAA,EAAA,QAAA,QAAA;;;;;;ACAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EApCf,IAAA,EAAA,QAAA,mBACA,EAAA,QAAA,wBAmCe,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,EAAA,UAAA,OAAA,OAAA,GAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,KAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,OAAA,SAAA,EAAA,GAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,IAAA,OAAA,WAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,MAAA,YAAA,EAAA,QAAA,UAAA,EAAA,UAAA,QAAA,EAAA,EAAA,MAAA,KAAA,WAAA,OAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,IAAA,WAAA,EAAA,IAAA,mBAAA,GAAA,OAAA,EAAA,QAAA,IAAA,EAAA,MAAA,IAAA,UAAA,4DAAA,OAAA,EAAA,GAAA,SAAA,EAAA,GAAA,QAAA,IAAA,EAAA,MAAA,IAAA,eAAA,6DAAA,OAAA,EAAA,SAAA,IAAA,GAAA,oBAAA,UAAA,QAAA,UAAA,OAAA,EAAA,GAAA,QAAA,UAAA,KAAA,OAAA,EAAA,GAAA,mBAAA,MAAA,OAAA,EAAA,IAAA,OAAA,QAAA,UAAA,QAAA,KAAA,QAAA,UAAA,QAAA,GAAA,gBAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,OAAA,SAAA,GAAA,OAAA,EAAA,WAAA,OAAA,eAAA,KAAA,GAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAjCf,IAAM,EAAY,QAAlB,gCACM,EAAY,QAAlB,gCAEM,EAAA,SAAA,GA8BS,EAAA,EA9BI,EAAA,MA8BJ,IAAA,EAAA,EAAA,GA1Bb,SAAY,EAAA,GAA8B,IAAA,EAAA,OAAA,EAAA,KAAA,GAAA,EAAA,EACxC,EAAM,EAAA,KAAA,KAAA,IADkC,aAAA,GAAA,EAAA,EAAA,GAAA,aAAA,GAAA,EAY9B,EAAA,GAAA,YAAA,WACV,EAAK,MAAM,YAAc,EACzB,EAAK,MAAM,SAd6B,EAiBjC,EAAA,GAAA,SAAA,WACP,IAAK,EAAK,IACR,MAAM,IAAI,MAAM,yCAGlB,EAAK,IAAI,UAAU,EAAK,MAAO,EAAK,EAAG,EAAK,KAnB5C,EAAK,MAAQ,GACb,EAAK,OAAS,GAEd,EAAK,MAAQ,IAAI,MAAM,GACvB,EAAK,MAAM,OAAS,GAEpB,EAAK,OAAQ,EAAA,EAAA,aAAY,GATe,EA0B7B,OAAA,EAAA,GA9BT,GA8BS,EAAA,EAAA,QAAA,QAAA;;;;AC0CA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA9Ef,IAAA,EAAA,EAAA,QAAA,WACA,EAAA,QAAA,mBACA,EAAA,QAAA,wBACA,EAAA,EAAA,QAAA,WA2Ee,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,EAAA,UAAA,OAAA,OAAA,GAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,KAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,OAAA,SAAA,EAAA,GAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,IAAA,OAAA,WAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,MAAA,YAAA,EAAA,QAAA,UAAA,EAAA,UAAA,QAAA,EAAA,EAAA,MAAA,KAAA,WAAA,OAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,IAAA,WAAA,EAAA,IAAA,mBAAA,GAAA,OAAA,EAAA,QAAA,IAAA,EAAA,MAAA,IAAA,UAAA,4DAAA,OAAA,EAAA,GAAA,SAAA,EAAA,GAAA,QAAA,IAAA,EAAA,MAAA,IAAA,eAAA,6DAAA,OAAA,EAAA,SAAA,IAAA,GAAA,oBAAA,UAAA,QAAA,UAAA,OAAA,EAAA,GAAA,QAAA,UAAA,KAAA,OAAA,EAAA,GAAA,mBAAA,MAAA,OAAA,EAAA,IAAA,OAAA,QAAA,UAAA,QAAA,KAAA,QAAA,UAAA,QAAA,GAAA,gBAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,OAAA,SAAA,GAAA,OAAA,EAAA,WAAA,OAAA,eAAA,KAAA,GAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAzEf,IAAM,EAAY,QAAlB,gCAEM,EAAA,SAAA,GAuES,EAAA,EAvES,EAAA,MAuET,IAAA,EAAA,EAAA,GA/Db,SAAY,EAAA,GAA8B,IAAA,EAAA,OAAA,EAAA,KAAA,GAAA,EAAA,EACxC,EAAM,EAAA,KAAA,KAAA,IADkC,WAAA,GAAA,EAAA,EAAA,GAAA,WAAA,GAAA,EAAA,EAAA,GAAA,YAAA,GAAA,EAAA,EAAA,GAAA,YAAA,GAAA,EAAA,EAAA,GAAA,aAAA,GAAA,EAa7B,EAAA,GAAA,aAAA,WACX,EAAK,KAAO,IAAI,EAAJ,QAAS,EAAK,KAE1B,EAAK,KAAK,KAAK,EAAK,GACpB,EAAK,KAAK,KAAK,EAAK,KAjBoB,EAoB7B,EAAA,GAAA,aAAA,WACX,EAAK,KAAO,IAAI,EAAJ,QAAS,EAAK,KAE1B,EAAK,KAAK,KAAK,EAAK,GACpB,EAAK,KAAK,KAAK,EAAK,KAxBoB,EA2B7B,EAAA,GAAA,aAAA,WACX,EAAK,KAAO,OA5B4B,EA+B7B,EAAA,GAAA,aAAA,WACX,EAAK,KAAO,OAhC4B,EAmCjC,EAAA,GAAA,SAAA,SAAC,GACR,EAAK,IAAM,IApC6B,EAuCjC,EAAA,GAAA,SAAA,SAAC,GACR,EAAK,IAAM,IAxC6B,EA2CjC,EAAA,GAAA,SAAA,WACP,IAAK,EAAK,IACR,MAAM,IAAI,MAAM,yCAIlB,EAAK,IAAI,UAAU,EAAK,MAAO,EAAK,EAAG,EAAK,GAGxC,EAAK,MACP,EAAK,KAAK,SAIR,EAAK,MACP,EAAK,KAAK,WAvDZ,EAAK,IAAM,EACX,EAAK,IAAM,EACX,EAAK,MAAQ,GACb,EAAK,OAAS,GAEd,EAAK,KAAO,KACZ,EAAK,KAAO,KACZ,EAAK,OAAQ,EAAA,EAAA,aAAY,GAVe,EA+D7B,OAAA,EAAA,GAvET,GAuES,EAAA,EAAA,QAAA,QAAA;;AC8BA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA5Gf,IAAA,EAAA,QAAA,mBAEA,EAAA,EAAA,QAAA,gBACA,EAAA,QAAA,wBAyGe,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,oBAAA,QAAA,EAAA,OAAA,WAAA,EAAA,cAAA,IAAA,EAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,KAAA,IAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,EAAA,UAAA,OAAA,OAAA,GAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,KAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,OAAA,SAAA,EAAA,GAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,IAAA,OAAA,WAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,MAAA,YAAA,EAAA,QAAA,UAAA,EAAA,UAAA,QAAA,EAAA,EAAA,MAAA,KAAA,WAAA,OAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,IAAA,WAAA,EAAA,IAAA,mBAAA,GAAA,OAAA,EAAA,QAAA,IAAA,EAAA,MAAA,IAAA,UAAA,4DAAA,OAAA,EAAA,GAAA,SAAA,EAAA,GAAA,QAAA,IAAA,EAAA,MAAA,IAAA,eAAA,6DAAA,OAAA,EAAA,SAAA,IAAA,GAAA,oBAAA,UAAA,QAAA,UAAA,OAAA,EAAA,GAAA,QAAA,UAAA,KAAA,OAAA,EAAA,GAAA,mBAAA,MAAA,OAAA,EAAA,IAAA,OAAA,QAAA,UAAA,QAAA,KAAA,QAAA,UAAA,QAAA,GAAA,gBAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,OAAA,SAAA,GAAA,OAAA,EAAA,WAAA,OAAA,eAAA,KAAA,GAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAtGT,IAAA,EAAA,SAAA,GAsGS,EAAA,EAtGK,EAAA,MAsGL,IAAA,EAAA,EAAA,GA/Fb,SAAY,EAAA,GAA8B,IAAA,EAUxC,GAVwC,EAAA,KAAA,GAAA,EAAA,EACxC,EAAM,EAAA,KAAA,KAAA,IADkC,YAAA,GAAA,EAAA,EAAA,GAAA,YAAA,GAAA,EAAA,EAAA,GAAA,aAAA,GAAA,EAAA,EAAA,GAAA,aAAA,GAAA,EA+B/B,EAAA,GAAA,WAAA,SAAC,GACV,EAAK,MAAQ,IAhC2B,EAmC3B,EAAA,GAAA,eAAA,WACb,OAAO,EAAK,MAAM,OAAO,SAAC,GACxB,OAAO,EAAK,SArC0B,EAyCtB,EAAA,GAAA,oBAAA,WAClB,IAAK,EAAK,MACR,MAAM,IAAI,MAAM,2CAGlB,OAAO,EAAK,MAAM,OAAO,SAAC,GACxB,IAAM,EAAU,EAAK,KACf,EAAU,EAAK,KACf,EAAgB,EAAK,MAAgB,QAAQ,GAEnD,OAAQ,IAAY,IAAY,MAnDM,EAuD7B,EAAA,GAAA,aAAA,WACX,IAAM,EAAO,EAAK,oBAEC,GADD,EAAA,EAAA,QAAO,EAAG,EAAK,OAAS,IAG/B,eA5D6B,EA+DzB,EAAA,GAAA,iBAAA,WAAK,IAAA,EACD,EAAA,EAAA,EAAK,gBADJ,IACpB,IAAwC,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAA,EAAA,MACjC,cAFa,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,OA/DoB,EAqE7B,EAAA,GAAA,aAAA,WACX,IAAM,EAAO,EAAK,oBAEC,GADD,EAAA,EAAA,QAAO,EAAG,EAAK,OAAS,IAG/B,eA1E6B,EA6EhC,EAAA,GAAA,UAAA,SAAqB,GAAA,IAAnB,EAAA,EAAA,IAAK,EAAA,EAAA,IACf,OAAO,EAAK,MAAM,KAAK,SAAC,GACtB,OAAO,EAAK,MAAQ,GAAO,EAAK,MAAQ,MA/EF,EAmFjC,EAAA,GAAA,SAAA,WACP,IAAK,EAAK,IACR,MAAM,IAAI,MAAM,yCAGlB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,OAAQ,IAAK,CAC7B,EAAK,MAAM,GACnB,YAvFP,EAAK,KAAO,GACZ,EAAK,KAAO,GAEZ,EAAK,MAAQ,GACb,EAAK,MAAQ,KAGT,EAAK,IACP,IAAK,IAAI,EAAM,EAAG,EAAM,EAAK,KAAM,IACjC,IAAK,IAAI,EAAM,EAAG,EAAM,EAAK,KAAM,IAAO,CACxC,IAAM,EAAO,IAAI,EAAJ,QAAc,EAAK,KAE1B,EAAY,EAAK,MAAQ,EACzB,EAAa,EAAK,OAAS,EAC3B,GAAW,EAAK,IAAI,OAAO,MAAQ,EAAY,EAAK,MAAQ,EAC5D,GAAW,EAAK,IAAI,OAAO,OAAS,EAAa,EAAK,MAAQ,EAEpE,EAAK,OAAO,GACZ,EAAK,OAAO,GACZ,EAAK,KAAK,EAAM,EAAY,GAC5B,EAAK,KAAK,EAAM,EAAa,GAE7B,EAAK,MAAM,KAAK,GAzBkB,OAAA,EA+F7B,OAAA,EAAA,GAtGT,GAsGS,EAAA,EAAA,QAAA,QAAA;;;;;;ACnDA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAzDf,IAAA,EAAA,QAAA,mBACA,EAAA,QAAA,wBAwDe,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,EAAA,UAAA,OAAA,OAAA,GAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,KAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,OAAA,SAAA,EAAA,GAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,IAAA,OAAA,WAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,MAAA,YAAA,EAAA,QAAA,UAAA,EAAA,UAAA,QAAA,EAAA,EAAA,MAAA,KAAA,WAAA,OAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,IAAA,WAAA,EAAA,IAAA,mBAAA,GAAA,OAAA,EAAA,QAAA,IAAA,EAAA,MAAA,IAAA,UAAA,4DAAA,OAAA,EAAA,GAAA,SAAA,EAAA,GAAA,QAAA,IAAA,EAAA,MAAA,IAAA,eAAA,6DAAA,OAAA,EAAA,SAAA,IAAA,GAAA,oBAAA,UAAA,QAAA,UAAA,OAAA,EAAA,GAAA,QAAA,UAAA,KAAA,OAAA,EAAA,GAAA,mBAAA,MAAA,OAAA,EAAA,IAAA,OAAA,QAAA,UAAA,QAAA,KAAA,QAAA,UAAA,QAAA,GAAA,gBAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,OAAA,SAAA,GAAA,OAAA,EAAA,WAAA,OAAA,eAAA,KAAA,GAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAtDf,IAAM,EAAY,QAAlB,gCACM,EAAY,QAAlB,gCAEM,EAAA,SAAA,GAmDS,EAAA,EAnDS,EAAA,MAmDT,IAAA,EAAA,EAAA,GA5Cb,SAAY,EAAA,GAA8B,IAAA,EAAA,OAAA,EAAA,KAAA,GAAA,EAAA,EACxC,EAAM,EAAA,KAAA,KAAA,IADkC,WAAA,GAAA,EAAA,EAAA,GAAA,WAAA,GAAA,EAAA,EAAA,GAAA,YAAA,GAAA,EAAA,EAAA,GAAA,YAAA,GAAA,EAYjC,EAAA,GAAA,SAAA,SAAC,GACR,EAAK,IAAM,IAb6B,EAgBjC,EAAA,GAAA,SAAA,SAAC,GACR,EAAK,IAAM,IAjB6B,EAoB7B,EAAA,GAAA,aAAA,SAAC,GACZ,EAAK,UAAU,EAAK,KAAM,KArBc,EAwB7B,EAAA,GAAA,aAAA,WACX,IAAK,EAAK,IACR,MAAM,IAAI,MAAM,yCAGlB,EAAK,IAAI,UAAU,EAAK,KAAM,EAAK,EAAG,EAAK,KA7BH,EAmCjC,EAAA,GAAA,SAAA,SAAC,GACR,IAAK,EAAK,IACR,MAAM,IAAI,MAAM,yCAGlB,EAAK,IAAI,UAAU,EAAO,EAAK,EAAG,EAAK,KArCvC,EAAK,IAAM,EACX,EAAK,IAAM,EACX,EAAK,MAAQ,GACb,EAAK,OAAS,GAEd,EAAK,MAAO,EAAA,EAAA,aAAY,GACxB,EAAK,MAAO,EAAA,EAAA,aAAY,GATgB,EA4C7B,OAAA,EAAA,GAnDT,GAmDS,EAAA,EAAA,QAAA,QAAA;;;;AC8HA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAvLf,IAAA,EAAA,QAAA,mBACA,EAAA,EAAA,QAAA,gBAsLe,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,6IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,MAAA,EAAA,KAAA,oBAAA,QAAA,EAAA,OAAA,WAAA,EAAA,cAAA,GAAA,MAAA,EAAA,CAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,IAAA,IAAA,EAAA,EAAA,KAAA,KAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,EAAA,UAAA,OAAA,OAAA,GAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,KAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,OAAA,SAAA,EAAA,GAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,IAAA,OAAA,WAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,MAAA,YAAA,EAAA,QAAA,UAAA,EAAA,UAAA,QAAA,EAAA,EAAA,MAAA,KAAA,WAAA,OAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,IAAA,WAAA,EAAA,IAAA,mBAAA,GAAA,OAAA,EAAA,QAAA,IAAA,EAAA,MAAA,IAAA,UAAA,4DAAA,OAAA,EAAA,GAAA,SAAA,EAAA,GAAA,QAAA,IAAA,EAAA,MAAA,IAAA,eAAA,6DAAA,OAAA,EAAA,SAAA,IAAA,GAAA,oBAAA,UAAA,QAAA,UAAA,OAAA,EAAA,GAAA,QAAA,UAAA,KAAA,OAAA,EAAA,GAAA,mBAAA,MAAA,OAAA,EAAA,IAAA,OAAA,QAAA,UAAA,QAAA,KAAA,QAAA,UAAA,QAAA,GAAA,gBAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,OAAA,SAAA,GAAA,OAAA,EAAA,WAAA,OAAA,eAAA,KAAA,GAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAjLf,IAAM,EAAoB,CACxB,GAAI,EACJ,KAAM,IACN,KAAM,IACN,MAAO,IAGH,EAA0C,CAC9C,GAAI,EAAE,EAAG,GACT,KAAM,CAAC,EAAG,GACV,KAAM,CAAC,GAAI,GACX,MAAO,CAAC,EAAG,IAGP,EAAa,QAAnB,iCAEM,EAAA,SAAA,GAiKS,EAAA,EAjKK,EAAA,MAiKL,IAAA,EAAA,EAAA,GAvJb,SAAY,EAAA,GAA8B,IAAA,EAAA,OAAA,EAAA,KAAA,GAAA,EAAA,EACxC,EAAM,EAAA,KAAA,KAAA,IADkC,aAAA,GAAA,EAAA,EAAA,GAAA,gBAAA,GAAA,EAAA,EAAA,GAAA,iBAAA,GAAA,EAAA,EAAA,GAAA,aAAA,GAAA,EAAA,EAAA,GAAA,aAAA,GAAA,EAAA,EAAA,GAAA,aAAA,GAAA,EAa9B,EAAA,GAAA,YAAA,WACV,EAAK,MAAM,MAAO,EAClB,EAAK,MAAM,YAAc,EACzB,EAAK,MAAM,SAhB6B,EAmB9B,EAAA,GAAA,YAAA,WACV,EAAK,MAAM,YAAc,EACzB,EAAK,MAAM,UArB6B,EAwBhC,EAAA,GAAA,UAAA,SAA0B,GAAA,IAAxB,EAAA,EAAA,IAAK,EAAA,EAAA,IACf,OAAO,QACL,EAAK,MAAM,KAAK,SAAC,GACf,OAAO,EAAK,MAAQ,GAAO,EAAK,MAAQ,OA3BJ,EAgC1B,EAAA,GAAA,gBAAA,SAAC,GACf,EAAK,MAAQ,EAQb,IANA,IAAM,EAAqB,CACzB,CAAC,IAAK,EAAG,IAAK,GACd,CAAC,IAAK,EAAG,IAAK,GACd,CAAC,IAAK,EAAG,IAAK,IAGP,EAAI,EAAG,EAAI,EAAW,OAAQ,IAAK,CAC1C,IAAM,EAAY,EAAW,GACvB,EAAY,EAAK,MAAM,QAAQ,GAErC,GAAI,EAAW,CACb,IAAM,EAAY,EAAK,WAAW,GAClC,EAAK,MAAM,KAAK,OA/CoB,EAoDnC,EAAA,GAAA,OAAA,SAAC,GACD,EAAK,UACR,EAAK,YAGP,EAAK,UAAW,EAGM,SAAnB,EAAK,WAAsC,UAAd,GACV,UAAnB,EAAK,WAAuC,SAAd,GACX,OAAnB,EAAK,WAAoC,SAAd,GACR,SAAnB,EAAK,WAAsC,OAAd,IAKhC,EAAK,UAAY,KApEuB,EAuElC,EAAA,GAAA,QAAA,SAAC,GACP,IAAK,EAAK,MACR,MAAM,IAAI,MAAM,sCAGlB,GAAK,EAAK,SAAV,CAEA,IAAM,EAAW,EAAK,cAEtB,IAAK,GAAY,EAAK,QAAQ,GAE5B,OADA,EAAK,YACE,IAGT,GAAI,EAAS,KAGX,OAFA,EAAK,YACL,EAAS,KAAK,YACP,IAGT,IAAM,EAAY,EAAK,WAAW,GAElC,EAAK,MAAM,QAAQ,GAEf,EAAS,MACX,EAAS,KAAK,YACd,EAAS,aAET,EAAK,MAAM,aAEX,EAAK,SAEL,EAAK,MAAM,SAvG2B,EA2G7B,EAAA,GAAA,aAAA,SAAC,GACZ,IAAM,EAAY,IAAI,EAAJ,QAAc,EAAK,KAOrC,OALA,EAAU,KAAK,EAAU,GACzB,EAAU,KAAK,EAAU,GACzB,EAAU,OAAO,EAAU,KAC3B,EAAU,OAAO,EAAU,KAEpB,IAnHiC,EAsH5B,EAAA,GAAA,cAAA,WACZ,IAAK,EAAK,MACR,MAAM,IAAI,MAAM,+CAGlB,IAA+B,EAAA,EAAA,EAAU,EAAK,WAA9C,GAAO,EAAP,EAAA,GAAkB,EAAlB,EAAA,GAEM,EAAO,EAAK,MAAM,GAClB,EAAM,EAAK,IAAM,EACjB,EAAM,EAAK,IAAM,EAEvB,OAAO,EAAK,MAAM,QAAQ,CAAC,IAAA,EAAK,IAAA,MAjIQ,EAoIjC,EAAA,GAAA,SAAA,WACP,IAAK,EAAK,IACR,MAAM,IAAI,MAAM,yCAIlB,IAAM,EAAY,EAAK,MAAM,GACvB,EAAQ,EAAM,EAAK,WAEzB,EAAU,WAAW,GAGrB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,OAAQ,IAAK,CACxB,EAAK,MAAM,GACnB,gBA/IZ,EAAK,MAAQ,EACb,EAAK,UAAW,EAChB,EAAK,UAAY,KAEjB,EAAK,MAAQ,KACb,EAAK,MAAQ,GAEb,EAAK,MAAQ,IAAI,MAAM,GAViB,EAuJ7B,OAAA,EAAA,GAjKT,GAiKS,EAAA,EAAA,QAAA,QAAA;;ACtDf,aAjIA,IAAA,EAAA,EAAA,QAAA,4BACA,EAAA,EAAA,QAAA,6BACA,EAAA,EAAA,QAAA,6BA+HA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EA7HM,IAAA,EAUJ,EAAA,SAAmB,EAAA,GAAyB,IAAA,EAAA,KAAA,EAAA,KAAA,GAAA,EAAA,KAAA,cAAA,GAAA,EAAA,KAAA,gBAAA,GAAA,EAAA,KAAA,aAAA,GAAA,EAAA,KAAA,aAAA,GAAA,EAAA,KAAA,aAAA,GAAA,EAAA,KAAA,kBAAA,GAAA,EAAA,KAAA,WAAA,GAAA,EAuChC,KAAA,YAAA,SAAC,GACX,OAAQ,EAAE,KACR,IAAK,UACH,EAAK,MAAM,KAAK,MAChB,MAEF,IAAK,YACH,EAAK,MAAM,KAAK,QAChB,MAEF,IAAK,YACH,EAAK,MAAM,KAAK,QAChB,MAEF,IAAK,aACH,EAAK,MAAM,KAAK,YAtDsB,EA2DhC,KAAA,YAAA,WACV,IAAK,EAAK,IACR,MAAM,IAAI,MAAM,4CAGlB,EAAK,IAAI,UAAU,EAAG,EAAG,EAAK,OAAO,MAAO,EAAK,OAAO,UAhEd,EAmEnC,KAAA,SAAA,WACP,IAAK,EAAK,IACR,MAAM,IAAI,MAAM,yCAIlB,EAAK,YAGL,EAAK,WAAW,SAGhB,EAAK,MAAM,SAGX,EAAK,MAAM,SAGX,EAAK,IAAI,SAAmB,UAAA,OAAA,EAAK,MAAM,OAAS,GAAI,MArFV,EAwFpC,KAAA,QAAA,WACN,GAAI,EAAK,SACP,OAAO,qBAAqB,EAAK,OAGnC,EAAK,SACL,EAAK,MAAQ,sBAAsB,EAAK,SA9FE,EAiGtC,KAAA,MAAA,SAAC,GACL,EAAK,UAAW,EAChB,OAAO,SAAS,SAChB,MAAM,KApGoC,EAuGtC,KAAA,MAAA,WACJ,EAAK,IAAI,kBAxGiC,EA2GnC,KAAA,SAAA,WACP,EAAK,IAAI,mBA5GQ,KAAA,OAAA,EACjB,KAAK,MAAQ,KACb,KAAK,UAAW,EAEhB,KAAK,IAAM,KAAK,OAAO,WAAW,MAElC,KAAK,MAAQ,IAAI,EAAJ,QAAU,KAAK,KAC5B,KAAK,MAAQ,IAAI,EAAJ,QAAU,KAAK,KAC5B,KAAK,WAAa,IAAI,EAAJ,QAAe,KAAK,KAGtC,KAAK,MAAM,SAAS,KAAK,OACzB,KAAK,MAAM,aACX,KAAK,MAAM,aAEX,YAAY,WACN,EAAK,MAAM,WACb,EAAK,MAAM,iBACX,EAAK,MAAM,eAEZ,KAGH,KAAK,MAAM,cAAc,KAAK,OAE9B,YAAY,WACV,EAAK,MAAM,MAAM,EAAK,SACrB,KAGC,KAAK,MACP,KAAK,IAAI,KAAO,cAChB,KAAK,IAAI,UAAY,QAIvB,OAAO,iBAAiB,UAAW,KAAK,aA4EtC,EAAS,SAAS,eAAe,QACjC,EAAO,IAAI,EAAK,GAEtB,EAAK","file":"src.0e06ca85.js","sourceRoot":"../src","sourcesContent":["export abstract class Base {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n\n  constructor(public ctx: CanvasRenderingContext2D | null) {\n    this.x = 0;\n    this.y = 0;\n    this.width = 0;\n    this.height = 0;\n  }\n\n  setX = (x: number) => {\n    this.x = x;\n  };\n\n  setY = (y: number) => {\n    this.y = y;\n  };\n\n  render = (...args: any) => {};\n\n  drawImage = (image: HTMLImageElement, degree: number) => {\n    if (!this.ctx) return;\n\n    const halfWidth = this.width / 2;\n    const halfHeight = this.height / 2;\n\n    // Save the original state of the context\n    this.ctx.save();\n\n    // Move the origin of coordinates to the center of the head\n    this.ctx.translate(this.x + halfWidth, this.y + halfHeight);\n\n    // Rotate the context around the center of the snake head sprite\n    this.ctx.rotate((degree * Math.PI) / 180);\n\n    // Draw the head taking into account the rotation of the context\n    this.ctx.drawImage(image, -halfWidth, -halfHeight);\n\n    // Restore the original state of the context\n    this.ctx.restore();\n  };\n}\n","export const random = (min: number, max: number) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport const createImage = (path: string) => {\n  const image = new Image();\n  image.src = path;\n  return image;\n};\n","import {Base} from '@abstracts';\nimport {createImage} from '@helpers/common';\n\nconst bgImage = require('/assets/images/background.svg');\n\nclass Background extends Base {\n  image: HTMLImageElement;\n\n  constructor(ctx: typeof Base.prototype.ctx) {\n    super(ctx);\n\n    this.image = createImage(bgImage);\n  }\n\n  render = () => {\n    if (!this.ctx) {\n      throw new Error('Need to set context before rendering!');\n    }\n\n    this.ctx.drawImage(this.image, this.x, this.y);\n  };\n}\n\nexport default Background;\n","import {Base} from '@abstracts';\nimport {createImage} from '@helpers/common';\n\nconst foodSound = require('/assets/sounds/food.mp3');\nconst foodImage = require('/assets/images/food.svg');\n\nclass Food extends Base {\n  audio: HTMLAudioElement;\n  image: HTMLImageElement;\n\n  constructor(ctx: typeof Base.prototype.ctx) {\n    super(ctx);\n\n    this.width = 28;\n    this.height = 28;\n\n    this.audio = new Audio(foodSound);\n    this.audio.volume = 0.75;\n\n    this.image = createImage(foodImage);\n  }\n\n  playSound = () => {\n    this.audio.currentTime = 0;\n    this.audio.play();\n  };\n\n  render = () => {\n    if (!this.ctx) {\n      throw new Error('Need to set context before rendering!');\n    }\n\n    this.ctx.drawImage(this.image, this.x, this.y);\n  };\n}\n\nexport default Food;\n","import {Base} from '@abstracts';\nimport {createImage} from '@helpers/common';\n\nconst bombSound = require('/assets/sounds/bomb.mp3');\nconst bombImage = require('/assets/images/bomb.svg');\n\nclass Bomb extends Base {\n  audio: HTMLAudioElement;\n  image: HTMLImageElement;\n\n  constructor(ctx: typeof Base.prototype.ctx) {\n    super(ctx);\n\n    this.width = 28;\n    this.height = 28;\n\n    this.audio = new Audio(bombSound);\n    this.audio.volume = 0.5;\n\n    this.image = createImage(bombImage);\n  }\n\n  playSound = () => {\n    this.audio.currentTime = 0;\n    this.audio.play();\n  };\n\n  render = () => {\n    if (!this.ctx) {\n      throw new Error('Need to set context before rendering!');\n    }\n\n    this.ctx.drawImage(this.image, this.x, this.y);\n  };\n}\n\nexport default Bomb;\n","import Food from './Food';\nimport {Base} from '@abstracts';\nimport {createImage} from '@helpers/common';\nimport Bomb from './Bomb';\n\nconst cellImage = require('/assets/images/cell.svg');\n\nclass BoardCell extends Base {\n  row: number;\n  col: number;\n\n  food: Food | null;\n  bomb: Bomb | null;\n  image: HTMLImageElement;\n\n  constructor(ctx: typeof Base.prototype.ctx) {\n    super(ctx);\n\n    this.row = 0;\n    this.col = 0;\n    this.width = 28;\n    this.height = 28;\n\n    this.food = null;\n    this.bomb = null;\n    this.image = createImage(cellImage);\n  }\n\n  createFood = () => {\n    this.food = new Food(this.ctx);\n\n    this.food.setX(this.x);\n    this.food.setY(this.y);\n  };\n\n  createBomb = () => {\n    this.bomb = new Bomb(this.ctx);\n\n    this.bomb.setX(this.x);\n    this.bomb.setY(this.y);\n  };\n\n  removeFood = () => {\n    this.food = null;\n  };\n\n  removeBomb = () => {\n    this.bomb = null;\n  };\n\n  setRow = (row: number) => {\n    this.row = row;\n  };\n\n  setCol = (col: number) => {\n    this.col = col;\n  };\n\n  render = () => {\n    if (!this.ctx) {\n      throw new Error('Need to set context before rendering!');\n    }\n\n    // Cell\n    this.ctx.drawImage(this.image, this.x, this.y);\n\n    // Food\n    if (this.food) {\n      this.food.render();\n    }\n\n    // Bomb\n    if (this.bomb) {\n      this.bomb.render();\n    }\n  };\n}\n\nexport default BoardCell;\n","import {Base} from '@abstracts';\nimport {Cell} from '@interfaces';\nimport BoardCell from './BoardCell';\nimport {random} from '@helpers/common';\nimport Snake from '@components/Snake/Snake';\n\nclass Board extends Base {\n  rows: number;\n  cols: number;\n\n  cells: BoardCell[];\n  snake: Snake | null;\n\n  constructor(ctx: typeof Base.prototype.ctx) {\n    super(ctx);\n\n    this.rows = 15;\n    this.cols = 15;\n\n    this.cells = [];\n    this.snake = null;\n\n    // Setup cells\n    if (this.ctx) {\n      for (let row = 0; row < this.rows; row++) {\n        for (let col = 0; col < this.cols; col++) {\n          const cell = new BoardCell(this.ctx);\n\n          const cellWidth = cell.width + 1;\n          const cellHeight = cell.height + 1;\n          const offsetX = (this.ctx.canvas.width - cellWidth * this.cols) / 2;\n          const offsetY = (this.ctx.canvas.height - cellHeight * this.rows) / 2;\n\n          cell.setRow(row);\n          cell.setCol(col);\n          cell.setX(col * cellWidth + offsetX);\n          cell.setY(row * cellHeight + offsetY);\n\n          this.cells.push(cell);\n        }\n      }\n    }\n  }\n\n  setSnake = (snake: Snake) => {\n    this.snake = snake;\n  };\n\n  getBombCells = () => {\n    return this.cells.filter((cell) => {\n      return cell.bomb;\n    });\n  };\n\n  getAvailableCells = () => {\n    if (!this.snake) {\n      throw new Error('Need to set snake before creating food!');\n    }\n\n    return this.cells.filter((cell) => {\n      const hasFood = cell.food;\n      const hasBomb = cell.bomb;\n      const hasSnakeCell = (this.snake as Snake).hasCell(cell);\n\n      return !hasFood && !hasBomb && !hasSnakeCell;\n    });\n  };\n\n  createFood = () => {\n    const pool = this.getAvailableCells();\n    const randomIdx = random(0, pool.length - 1);\n    const randomCell = pool[randomIdx];\n\n    randomCell.createFood();\n  };\n\n  removeAllBombs = () => {\n    for (const cell of this.getBombCells()) {\n      cell.removeBomb();\n    }\n  };\n\n  createBomb = () => {\n    const pool = this.getAvailableCells();\n    const randomIdx = random(0, pool.length - 1);\n    const randomCell = pool[randomIdx];\n\n    randomCell.createBomb();\n  };\n\n  getCell = ({row, col}: Cell) => {\n    return this.cells.find((cell) => {\n      return cell.row === row && cell.col === col;\n    });\n  };\n\n  render = () => {\n    if (!this.ctx) {\n      throw new Error('Need to set context before rendering!');\n    }\n\n    for (let i = 0; i < this.cells.length; i++) {\n      const cell = this.cells[i];\n      cell.render();\n    }\n  };\n}\n\nexport default Board;\n","import {Base} from '@abstracts';\nimport {createImage} from '@helpers/common';\n\nconst headImage = require('/assets/images/head.svg');\nconst bodyImage = require('/assets/images/body.svg');\n\nclass SnakeCell extends Base {\n  row: number;\n  col: number;\n\n  head: HTMLImageElement;\n  body: HTMLImageElement;\n\n  constructor(ctx: typeof Base.prototype.ctx) {\n    super(ctx);\n\n    this.row = 0;\n    this.col = 0;\n    this.width = 28;\n    this.height = 28;\n\n    this.head = createImage(headImage);\n    this.body = createImage(bodyImage);\n  }\n\n  setRow = (row: number) => {\n    this.row = row;\n  };\n\n  setCol = (col: number) => {\n    this.col = col;\n  };\n\n  renderHead = (degree: number) => {\n    this.drawImage(this.head, degree);\n  };\n\n  renderBody = () => {\n    if (!this.ctx) {\n      throw new Error('Need to set context before rendering!');\n    }\n\n    this.ctx.drawImage(this.body, this.x, this.y);\n  };\n\n  /**\n   * @deprecated The method should not be used\n   */\n  render = (image: HTMLImageElement) => {\n    if (!this.ctx) {\n      throw new Error('Need to set context before rendering!');\n    }\n\n    this.ctx.drawImage(image, this.x, this.y);\n  };\n}\n\nexport default SnakeCell;\n","import {Base} from '@abstracts';\nimport SnakeCell from './SnakeCell';\nimport Board from '@components/Board/Board';\nimport BoardCell from '@components/Board/BoardCell';\nimport {Cell, Direction, Directions} from '@interfaces';\n\nconst ANGLE: Directions = {\n  up: 0,\n  down: 180,\n  left: 270,\n  right: 90,\n};\n\nconst DIRECTION: Directions<[number, number]> = {\n  up: [-1, 0],\n  down: [1, 0],\n  left: [0, -1],\n  right: [0, 1],\n};\n\nconst themeAudio = require('/assets/sounds/theme.mp3');\n\nclass Snake extends Base {\n  score: number;\n  isMoving: boolean;\n  direction: Direction;\n\n  cells: SnakeCell[];\n  board: Board | null;\n\n  theme: HTMLAudioElement;\n\n  constructor(ctx: typeof Base.prototype.ctx) {\n    super(ctx);\n\n    this.score = 0;\n    this.isMoving = false;\n    this.direction = 'up';\n\n    this.board = null;\n    this.cells = [];\n\n    this.theme = new Audio(themeAudio);\n  }\n\n  playTheme = () => {\n    this.theme.loop = true;\n    this.theme.currentTime = 0;\n    this.theme.play();\n  };\n\n  stopTheme = () => {\n    this.theme.currentTime = 0;\n    this.theme.pause();\n  };\n\n  hasCell = ({row, col}: BoardCell) => {\n    return Boolean(\n      this.cells.find((cell) => {\n        return cell.row === row && cell.col === col;\n      })\n    );\n  };\n\n  syncWithBoard = (board: Board) => {\n    this.board = board;\n\n    const startCells: Cell[] = [\n      {row: 7, col: 7},\n      {row: 8, col: 7},\n      {row: 9, col: 7},\n    ];\n\n    for (let i = 0; i < startCells.length; i++) {\n      const startCell = startCells[i];\n      const boardCell = this.board.getCell(startCell);\n\n      if (boardCell) {\n        const snakeCell = this.createCell(boardCell);\n        this.cells.push(snakeCell);\n      }\n    }\n  };\n\n  move = (direction: Direction) => {\n    if (!this.isMoving) {\n      this.playTheme();\n    }\n\n    this.isMoving = true;\n\n    if (\n      (this.direction === 'left' && direction === 'right') ||\n      (this.direction === 'right' && direction === 'left') ||\n      (this.direction === 'up' && direction === 'down') ||\n      (this.direction === 'down' && direction === 'up')\n    ) {\n      return;\n    }\n\n    this.direction = direction;\n  };\n\n  start = (failedCallback: () => void) => {\n    if (!this.board) {\n      throw new Error('Need to set board before starting!');\n    }\n\n    if (!this.isMoving) return;\n\n    const nextCell = this.getNextCell();\n\n    if (!nextCell || this.hasCell(nextCell)) {\n      this.stopTheme();\n      return failedCallback();\n    }\n\n    if (nextCell.bomb) {\n      this.stopTheme();\n      nextCell.bomb.playSound();\n      return failedCallback();\n    }\n\n    const snakeCell = this.createCell(nextCell);\n\n    this.cells.unshift(snakeCell);\n\n    if (nextCell.food) {\n      nextCell.food.playSound();\n      nextCell.removeFood();\n\n      this.board.createFood();\n\n      this.score++;\n    } else {\n      this.cells.pop();\n    }\n  };\n\n  createCell = (boardCell: BoardCell) => {\n    const snakeCell = new SnakeCell(this.ctx);\n\n    snakeCell.setX(boardCell.x);\n    snakeCell.setY(boardCell.y);\n    snakeCell.setRow(boardCell.row);\n    snakeCell.setCol(boardCell.col);\n\n    return snakeCell;\n  };\n\n  getNextCell = () => {\n    if (!this.board) {\n      throw new Error('Need to set board before getting next cell!');\n    }\n\n    const [rowOffset, colOffset] = DIRECTION[this.direction];\n\n    const cell = this.cells[0];\n    const row = cell.row + rowOffset;\n    const col = cell.col + colOffset;\n\n    return this.board.getCell({row, col});\n  };\n\n  render = () => {\n    if (!this.ctx) {\n      throw new Error('Need to set context before rendering!');\n    }\n\n    // Render head cell\n    const snakeHead = this.cells[0];\n    const angle = ANGLE[this.direction];\n\n    snakeHead.renderHead(angle);\n\n    // Render body cells\n    for (let i = 1; i < this.cells.length; i++) {\n      const snakeCell = this.cells[i];\n      snakeCell.renderBody();\n    }\n  };\n}\n\nexport default Snake;\n","import Background from '@components/Background';\nimport Board from '@components/Board/Board';\nimport Snake from '@components/Snake/Snake';\n\nclass Game {\n  isPaused: boolean;\n  frame: number | null;\n\n  snake: Snake;\n  board: Board;\n  background: Background;\n\n  ctx: CanvasRenderingContext2D | null;\n\n  constructor(public canvas: HTMLCanvasElement) {\n    this.frame = null;\n    this.isPaused = false;\n\n    this.ctx = this.canvas.getContext('2d');\n\n    this.board = new Board(this.ctx);\n    this.snake = new Snake(this.ctx);\n    this.background = new Background(this.ctx);\n\n    // Board setups\n    this.board.setSnake(this.snake);\n    this.board.createFood();\n    this.board.createBomb();\n\n    setInterval(() => {\n      if (this.snake.isMoving) {\n        this.board.removeAllBombs();\n        this.board.createBomb();\n      }\n    }, 3000);\n\n    // Snake setups\n    this.snake.syncWithBoard(this.board);\n\n    setInterval(() => {\n      this.snake.start(this.failed);\n    }, 150);\n\n    // Setup font\n    if (this.ctx) {\n      this.ctx.font = '28px Cactus';\n      this.ctx.fillStyle = '#fff';\n    }\n\n    // Setup listeners\n    window.addEventListener('keydown', this.onKeyDown);\n  }\n\n  onKeyDown = (e: KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowUp':\n        this.snake.move('up');\n        break;\n\n      case 'ArrowDown':\n        this.snake.move('down');\n        break;\n\n      case 'ArrowLeft':\n        this.snake.move('left');\n        break;\n\n      case 'ArrowRight':\n        this.snake.move('right');\n        break;\n    }\n  };\n\n  clearRect = () => {\n    if (!this.ctx) {\n      throw new Error('Need to set context before clear canvas!');\n    }\n\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  };\n\n  render = () => {\n    if (!this.ctx) {\n      throw new Error('Need to set context before rendering!');\n    }\n\n    // Clear canvas\n    this.clearRect();\n\n    // Background\n    this.background.render();\n\n    // Board\n    this.board.render();\n\n    // Snake\n    this.snake.render();\n\n    // Text\n    this.ctx.fillText(`Score: ${this.snake.score}`, 30, 50);\n  };\n\n  start = () => {\n    if (this.isPaused) {\n      return cancelAnimationFrame(this.frame as number);\n    }\n\n    this.render();\n    this.frame = requestAnimationFrame(this.start);\n  };\n\n  end = (message: string) => {\n    this.isPaused = true;\n    window.location.reload();\n    alert(message);\n  };\n\n  win = () => {\n    this.end('Вы выйграли!');\n  };\n\n  failed = () => {\n    this.end('Вы проиграли!');\n  };\n}\n\nconst canvas = document.getElementById('game') as HTMLCanvasElement;\nconst game = new Game(canvas);\n\ngame.start();\n"]}